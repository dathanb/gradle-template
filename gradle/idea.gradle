apply plugin: "idea"

// -----------------------------------------
// Set Java Version in the Project + Modules
// -----------------------------------------
if (project.parent == null) {
    idea {
        if (project != null) {
            project {
                languageLevel = javaVersion
            }
        }

        //TODO: Remove when IntelliJ 12 support is no longer needed
        module {
            jdkName = javaVersion
            iml {
                withXml {
                    it.asNode().component.find { it.@name == "NewModuleRootManager" }.@LANGUAGE_LEVEL = jdkVersion
                }
            }
        }
    }
}

// ----------------------------------------------------------------------------------------------------
// Make JUnit and Application run configurations use the module dir as the working directory by default
// This is consistent with the way Gradle runs tests
// ----------------------------------------------------------------------------------------------------
if (project.parent == null) { // only the root project has a workspace, so only apply this logic to the root
    project.extensions.idea.workspace{

        iws {
            withXml {
                def componentNode = it.asNode().component.find { it.@name == "RunManager"}
                if (componentNode == null) {
                    throw new Error("Could not find RunManager node")
                }

                // configure JUnit default
                def junitConfig = componentNode.configuration.find { it.@default=="true" && it.@type=="JUnit" && it.@factoryName == "JUnit"}
                if (junitConfig == null) {
                    throw new Error("Did not expect null JUnit node")
                }
                def junitOptionNode = junitConfig.option.find{it.@name=="WORKING_DIRECTORY"}
                if (junitOptionNode != null) {
                    junitOptionNode.@value='file://$MODULE_DIR$'
                }
            }
        }

        iws {
            withXml {
                def componentNode = it.asNode().component.find { it.@name == "RunManager"}
                if (componentNode == null) {
                    throw new Error("Could not find RunManager node")
                }

                // configure Application default
                def appConfig = componentNode.configuration.find { it.@default=="true" && it.@type=="Application" && it.@factoryName == "Application"}
                if (appConfig == null) {
                    throw new Error("Did not expect null Application node")
                }
                def applicationOptionNode = appConfig.option.find{it.@name=="WORKING_DIRECTORY"}
                if (applicationOptionNode != null) {
                    applicationOptionNode.@value='file://$MODULE_DIR$'
                }
            }
        }
    }
}

